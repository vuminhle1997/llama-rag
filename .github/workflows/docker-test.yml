name: Test Build Docker Images on Dev

on:
  workflow_dispatch:
  push:
    branches:
      - dev

env:
  REGISTRY: ghcr.io
  IMAGE_BASENAME: ${{ github.repository }}
  OLLAMA_MODEL: llama3.2

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Git Commit ID
        id: vars
        run: echo "commit_id=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set OLLAMA_MODEL environment variable
        run: echo "OLLAMA_MODEL=llama3.2:1b" >> $GITHUB_ENV

      - name: Setup Ollama
        uses: ai-action/setup-ollama@v1

      - name: Pull LLM
        run: ollama pull llama3.2:1b

      - name: Pull Embedding Model
        run: ollama pull mxbai-embed-large

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
          cache: "pip"
          cache-dependency-path: backend/requirements.txt

      - name: Set up Python virtual environment. Run unit tests.
        run: |
          cd backend
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          deepeval test run ./tests/test_llm_app.py 
          rm -rf venv
          cd ..

    outputs:
      commit_id: ${{ env.commit_id }}

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and tag fastapi Docker image
        run: |
          docker build -t fastapi:${{ needs.test.outputs.commit_id }} ./backend
          echo "FastAPI build successful for commit ${{ needs.test.outputs.commit_id }}"

      - name: Build and tag nextjs Docker image
        run: |
          docker build -t nextjs:${{ needs.test.outputs.commit_id }} ./frontend
          echo "Next.js build successful for commit ${{ needs.test.outputs.commit_id }}"
